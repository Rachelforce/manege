from telebot import types, TeleBot
from telebot.types import InputMediaPhoto


class Answer:
    def __init__(self, text, state):
        self.text = text
        self.state = state


class State:
    def __init__(self, phrase, answers, photos=None):
        self.phrase = phrase
        self.answers = answers
        self.keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        self.photos = photos
        for el in self.answers:
            self.keyboard.add(el)

    def check_answer(self, user, text):
        if text in self.answers:
            bot.send_message(user, self.answers[text].text, reply_markup=self.keyboard, parse_mode='Markdown')
            user_state[user] = self.answers[text].state

    def process_state(self, user):
        if self.photos:
            bot.send_media_group(user, self.photos)
        bot.send_message(user, self.phrase, reply_markup=self.keyboard, parse_mode='Markdown')


class TextState(State):
    def __init__(self, phrase, answers, true_answer, photos=None):
        self.true_answer = true_answer
        super().__init__(phrase, answers, photos)

    def check_answer(self, user, text):
        if text in self.answers:
            bot.send_message(user, self.answers[text].text, reply_markup=self.keyboard, parse_mode='Markdown')
            user_state[user] = self.answers[text].state
        elif text == self.true_answer:
            bot.send_message(user, "‚úÖ –í–µ—Ä–Ω–æ")
            user_state[user] += 1
        else:
            bot.send_message(user, "‚ùå –ù–µ –≤–µ—Ä–Ω–æ")


TOKEN = '5002248438:AAEKWkH7es4Z5Y-4dx9WjtQalWbSbsy5jG4'
bot = TeleBot(TOKEN)

user_state = {}
states = list(range(8))

states[0] = State("üìã –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é", {
    "üß© –ù–∞—á–∞—Ç—å –∫–≤–µ—Å—Ç": Answer("–í—ã –ù–∞—á–∞–ª–∏ –∫–≤–µ—Å—Ç.", 1),
    "üéß –ü—Ä–æ—Å–ª—É—à–∞—Ç—å –∞—É–¥–∏–æ–≥–∏–¥ –ø–æ –≤—ã—Å—Ç–∞–≤–∫–µ":
        Answer("https://izi.travel/en/browse/76ad97a7-3969-4427-a0c7-08b20490d65f?lang=ru", 0),
    "üéµ –ü–æ—Å–ª—É—à–∞—Ç—å —Å–∞—É–Ω–¥—Ç—Ä–µ–∫ –∫ –≤—ã—Å—Ç–∞–≤–∫–µ":
        Answer("https://batagov.lnk.to/pokoiiradost", 0)
})

states[1] = State(
    "–ü–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –Ω–∞—á–∞—Ç—å –∫–≤–µ—Å—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞–º –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –æ—Å–Ω–æ–≤–Ω–æ–π [–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π](https://telegra.ph/Mezhmuzejnyj-vystavochnyj-proekt-Pokoj-i-Radost-12-09) –æ –≤—ã—Å—Ç–∞–≤–∫–µ.",
    {
        "‚û°Ô∏è–î–∞–ª–µ–µ": Answer("–ù–∞—á–∞–ª–∏!", 2),
        "‚úñÔ∏è–í—ã—Ö–æ–¥": Answer("‚úñÔ∏è–í—ã—Ö–æ–¥", 0)
    },
)

states[2] = State(
    "–í—ã–±—Ä–∞—Ç—å 3 –∫–∞—Ä—Ç–∏–Ω—ã, –ø–æ –Ω–∏–º –∫—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –≤–æ–ø—Ä–æ—Å—ã –∫ –∫–∞–∂–¥–æ–π. –ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç",
    {
        "–û—Ç–≤–µ—Ç 1": Answer("‚ùå –ù–µ –≤–µ—Ä–Ω–æ", 2),
        "–û—Ç–≤–µ—Ç 2": Answer("‚úÖ –í–µ—Ä–Ω–æ!", 3),
        "–û—Ç–≤–µ—Ç 3": Answer("‚ùå –ù–µ –í–µ—Ä–Ω–æ!", 2),
        "‚úñÔ∏è–í—ã—Ö–æ–¥": Answer("‚úñÔ∏è–í—ã—Ö–æ–¥", 0)
    },
    [InputMediaPhoto(
        "https://downloader.disk.yandex.ru/preview/fab60992e44aabd16ff2adb7fcfa0b7c324ccd47c8e20cb5029d8e01a0b332e2/61b75c93/Hjn4m-wXOYrmpEF122iuJx_x_h9wvyWxUIe_ey95botkc_a-HMz1pNWKuHBgtrVqmSOdoSKyWUorppGJJvVltw%3D%3D?uid=0&filename=DSC00926.jpg&disposition=inline&hash=&limit=0&content_type=image%2Fjpeg&owner_uid=0&tknv=v2&size=882x927"), ]
)
states[3] = TextState(
    "–ó–∞–≥–∞–¥–∞–Ω–∞ –∫–∞–∫–∞—è-—Ç–æ –∫–∞—Ä—Ç–∏–Ω–∞ –∏ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –µ–µ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç: –∞–≤—Ç–æ—Ä, –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω—ã. –æ—Ç–≤–µ—Ç - 123",
    {"‚úñÔ∏è–í—ã—Ö–æ–¥": Answer("‚úñÔ∏è–í—ã—Ö–æ–¥", 0)},
    "123", [InputMediaPhoto(
        "https://downloader.disk.yandex.ru/preview/fab60992e44aabd16ff2adb7fcfa0b7c324ccd47c8e20cb5029d8e01a0b332e2/61b75c93/Hjn4m-wXOYrmpEF122iuJx_x_h9wvyWxUIe_ey95botkc_a-HMz1pNWKuHBgtrVqmSOdoSKyWUorppGJJvVltw%3D%3D?uid=0&filename=DSC00926.jpg&disposition=inline&hash=&limit=0&content_type=image%2Fjpeg&owner_uid=0&tknv=v2&size=882x927"), ]

)


@bot.message_handler(commands=['start'])
def command_help(message):
    user = message.chat.id
    user_state[user] = 0
    bot.send_message(user,
                     "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª —Å–æ–∑–¥–∞–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤—ã—Å—Ç–∞–≤–∫–∏ ¬´–ü–æ–∫–æ–π –∏ –†–∞–¥–æ—Å—Ç—å¬ª —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –ø–æ–¥—Ä–æ—Å—Ç–∫–æ–≤ –ú–∞–Ω–µ–∂ Junior.",
                     reply_markup=states[0].keyboard)


@bot.message_handler(content_types=['text'])
def default_command(message):
    user = message.chat.id
    text = message.text
    if user not in user_state:
        user_state[user] = 0
    states[user_state[user]].check_answer(user, text)
    states[user_state[user]].process_state(user)


bot.polling()
